// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/todo.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entities "HDYS-TTBYS/my-todo/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoUseCase is a mock of ITodoUseCase interface.
type MockITodoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockITodoUseCaseMockRecorder
}

// MockITodoUseCaseMockRecorder is the mock recorder for MockITodoUseCase.
type MockITodoUseCaseMockRecorder struct {
	mock *MockITodoUseCase
}

// NewMockITodoUseCase creates a new mock instance.
func NewMockITodoUseCase(ctrl *gomock.Controller) *MockITodoUseCase {
	mock := &MockITodoUseCase{ctrl: ctrl}
	mock.recorder = &MockITodoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoUseCase) EXPECT() *MockITodoUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoUseCase) Create(todo *entities.PostTodoJSONBody) (*entities.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", todo)
	ret0, _ := ret[0].(*entities.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoUseCaseMockRecorder) Create(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoUseCase)(nil).Create), todo)
}

// Delete mocks base method.
func (m *MockITodoUseCase) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITodoUseCaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodoUseCase)(nil).Delete), id)
}

// FindById mocks base method.
func (m *MockITodoUseCase) FindById(id int) (*entities.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entities.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockITodoUseCaseMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockITodoUseCase)(nil).FindById), id)
}

// FindMany mocks base method.
func (m *MockITodoUseCase) FindMany(offset int) (*entities.ResponseTodos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", offset)
	ret0, _ := ret[0].(*entities.ResponseTodos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockITodoUseCaseMockRecorder) FindMany(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockITodoUseCase)(nil).FindMany), offset)
}

// Update mocks base method.
func (m *MockITodoUseCase) Update(todo *entities.UpdateTodoIdJSONBody, id int) (*entities.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", todo, id)
	ret0, _ := ret[0].(*entities.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITodoUseCaseMockRecorder) Update(todo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoUseCase)(nil).Update), todo, id)
}

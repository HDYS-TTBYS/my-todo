// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/todo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entities "HDYS-TTBYS/my-todo/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoRepository) Create(todo *entities.PostTodoJSONBody) (*entities.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", todo)
	ret0, _ := ret[0].(*entities.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoRepositoryMockRecorder) Create(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoRepository)(nil).Create), todo)
}

// Delete mocks base method.
func (m *MockITodoRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITodoRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodoRepository)(nil).Delete), id)
}

// FindById mocks base method.
func (m *MockITodoRepository) FindById(id int) (*entities.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entities.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockITodoRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockITodoRepository)(nil).FindById), id)
}

// FindMany mocks base method.
func (m *MockITodoRepository) FindMany(offset int) ([]*entities.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", offset)
	ret0, _ := ret[0].([]*entities.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockITodoRepositoryMockRecorder) FindMany(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockITodoRepository)(nil).FindMany), offset)
}

// TotalCount mocks base method.
func (m *MockITodoRepository) TotalCount() (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalCount")
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalCount indicates an expected call of TotalCount.
func (mr *MockITodoRepositoryMockRecorder) TotalCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalCount", reflect.TypeOf((*MockITodoRepository)(nil).TotalCount))
}

// Update mocks base method.
func (m *MockITodoRepository) Update(todo *entities.UpdateTodoIdJSONBody, id int) (*entities.ToDo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", todo, id)
	ret0, _ := ret[0].(*entities.ToDo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITodoRepositoryMockRecorder) Update(todo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoRepository)(nil).Update), todo, id)
}

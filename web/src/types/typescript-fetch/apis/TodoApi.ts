/* tslint:disable */
/* eslint-disable */
/**
 * my-todo-api
 * テスト用todo
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tatehide151@outlook.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetTodos200Response,
  PostTodoRequest,
  ToDo,
  UpdateTodoIdRequest,
} from '../models';
import {
    GetTodos200ResponseFromJSON,
    GetTodos200ResponseToJSON,
    PostTodoRequestFromJSON,
    PostTodoRequestToJSON,
    ToDoFromJSON,
    ToDoToJSON,
    UpdateTodoIdRequestFromJSON,
    UpdateTodoIdRequestToJSON,
} from '../models';

export interface DeleteTodoIdRequest {
    id: number;
}

export interface GetTodoIdRequest {
    id: number;
}

export interface GetTodosRequest {
    offset: number;
}

export interface PostTodoOperationRequest {
    postTodoRequest?: PostTodoRequest;
}

export interface UpdateTodoIdOperationRequest {
    id: number;
    updateTodoIdRequest?: UpdateTodoIdRequest;
}

/**
 * 
 */
export class TodoApi extends runtime.BaseAPI {

    /**
     * todo IDが一致するtodoの情報を削除
     * Delete Todo Info by Todo ID
     */
    async deleteTodoIdRaw(requestParameters: DeleteTodoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Error>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTodoId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * todo IDが一致するtodoの情報を削除
     * Delete Todo Info by Todo ID
     */
    async deleteTodoId(requestParameters: DeleteTodoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Error> {
        const response = await this.deleteTodoIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo IDが一致するtodoの情報を取得
     * Get Todo Info by Todo ID
     */
    async getTodoIdRaw(requestParameters: GetTodoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToDo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTodoId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoFromJSON(jsonValue));
    }

    /**
     * todo IDが一致するtodoの情報を取得
     * Get Todo Info by Todo ID
     */
    async getTodoId(requestParameters: GetTodoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToDo> {
        const response = await this.getTodoIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * すべてのToDoを created_at descで取得する ただし、ToDoの総数が20を超えると、それ以上のToDoは返却されない
     * Get All Todo
     */
    async getTodosRaw(requestParameters: GetTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTodos200Response>> {
        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getTodos.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTodos200ResponseFromJSON(jsonValue));
    }

    /**
     * すべてのToDoを created_at descで取得する ただし、ToDoの総数が20を超えると、それ以上のToDoは返却されない
     * Get All Todo
     */
    async getTodos(requestParameters: GetTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTodos200Response> {
        const response = await this.getTodosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Todoを新規で作成する
     * Create New Todo
     */
    async postTodoRaw(requestParameters: PostTodoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToDo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/todo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTodoRequestToJSON(requestParameters.postTodoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoFromJSON(jsonValue));
    }

    /**
     * Todoを新規で作成する
     * Create New Todo
     */
    async postTodo(requestParameters: PostTodoOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToDo> {
        const response = await this.postTodoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * todo IDが一致するtodoの情報を更新
     * Update Todo Info by Todo ID
     */
    async updateTodoIdRaw(requestParameters: UpdateTodoIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToDo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTodoId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTodoIdRequestToJSON(requestParameters.updateTodoIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToDoFromJSON(jsonValue));
    }

    /**
     * todo IDが一致するtodoの情報を更新
     * Update Todo Info by Todo ID
     */
    async updateTodoId(requestParameters: UpdateTodoIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToDo> {
        const response = await this.updateTodoIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

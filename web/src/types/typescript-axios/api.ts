/* tslint:disable */
/* eslint-disable */
/**
 * my-todo-api
 * テスト用todo
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tatehide151@outlook.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetTodos200Response
 */
export interface GetTodos200Response {
    /**
     * 
     * @type {number}
     * @memberof GetTodos200Response
     */
    'total': number;
    /**
     * 
     * @type {Array<ToDo>}
     * @memberof GetTodos200Response
     */
    'todos'?: Array<ToDo>;
}
/**
 * エラーオブジェクトの共通スキーマ
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostTodoRequest
 */
export interface PostTodoRequest {
    /**
     * Todoのタイトル
     * @type {string}
     * @memberof PostTodoRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PostTodoRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTodoRequest
     */
    'assigin_person': string;
}
/**
 * Todoオブジェクトの共通スキーマ
 * @export
 * @interface ToDo
 */
export interface ToDo {
    /**
     * ユニークID
     * @type {number}
     * @memberof ToDo
     */
    'id': number;
    /**
     * Todoのタイトル
     * @type {string}
     * @memberof ToDo
     */
    'title': string;
    /**
     * Todoの説明
     * @type {string}
     * @memberof ToDo
     */
    'description'?: string;
    /**
     * Todoの完了・未完了を示すフラグ（trueが完了）
     * @type {boolean}
     * @memberof ToDo
     */
    'is_complete'?: boolean;
    /**
     * Todoを担当する人の名前
     * @type {string}
     * @memberof ToDo
     */
    'assagin_person'?: string | null;
    /**
     * Todoが作成された時刻（UNIXタイムで単位は秒）
     * @type {number}
     * @memberof ToDo
     */
    'created_at': number;
    /**
     * Todoが更新された時刻（UNIXタイムで単位は秒）
     * @type {number}
     * @memberof ToDo
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface UpdateTodoIdRequest
 */
export interface UpdateTodoIdRequest {
    /**
     * Todoのタイトル
     * @type {string}
     * @memberof UpdateTodoIdRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTodoIdRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTodoIdRequest
     */
    'assigin_person': string;
    /**
     * Todoの完了・未完了を示すフラグ（trueが完了）
     * @type {boolean}
     * @memberof UpdateTodoIdRequest
     */
    'is_complete': boolean;
}

/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * todo IDが一致するtodoの情報を削除
         * @summary Delete Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTodoId', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * todo IDが一致するtodoの情報を取得
         * @summary Get Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTodoId', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * すべてのToDoを created_at descで取得する ただし、ToDoの総数が20を超えると、それ以上のToDoは返却されない
         * @summary Get All Todo
         * @param {number} offset 結果セットの収集を開始する前にスキップするアイテムの数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodos: async (offset: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('getTodos', 'offset', offset)
            const localVarPath = `/api/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Todoを新規で作成する
         * @summary Create New Todo
         * @param {PostTodoRequest} [postTodoRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodo: async (postTodoRequest?: PostTodoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTodoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * todo IDが一致するtodoの情報を更新
         * @summary Update Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {UpdateTodoIdRequest} [updateTodoIdRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoId: async (id: number, updateTodoIdRequest?: UpdateTodoIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTodoId', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTodoIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * todo IDが一致するtodoの情報を削除
         * @summary Delete Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodoId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodoId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * todo IDが一致するtodoの情報を取得
         * @summary Get Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToDo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * すべてのToDoを created_at descで取得する ただし、ToDoの総数が20を超えると、それ以上のToDoは返却されない
         * @summary Get All Todo
         * @param {number} offset 結果セットの収集を開始する前にスキップするアイテムの数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodos(offset: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTodos200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodos(offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Todoを新規で作成する
         * @summary Create New Todo
         * @param {PostTodoRequest} [postTodoRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTodo(postTodoRequest?: PostTodoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToDo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTodo(postTodoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * todo IDが一致するtodoの情報を更新
         * @summary Update Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {UpdateTodoIdRequest} [updateTodoIdRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTodoId(id: number, updateTodoIdRequest?: UpdateTodoIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToDo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTodoId(id, updateTodoIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * todo IDが一致するtodoの情報を削除
         * @summary Delete Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoId(id: number, options?: any): AxiosPromise<Error> {
            return localVarFp.deleteTodoId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * todo IDが一致するtodoの情報を取得
         * @summary Get Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoId(id: number, options?: any): AxiosPromise<ToDo> {
            return localVarFp.getTodoId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * すべてのToDoを created_at descで取得する ただし、ToDoの総数が20を超えると、それ以上のToDoは返却されない
         * @summary Get All Todo
         * @param {number} offset 結果セットの収集を開始する前にスキップするアイテムの数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodos(offset: number, options?: any): AxiosPromise<GetTodos200Response> {
            return localVarFp.getTodos(offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Todoを新規で作成する
         * @summary Create New Todo
         * @param {PostTodoRequest} [postTodoRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodo(postTodoRequest?: PostTodoRequest, options?: any): AxiosPromise<ToDo> {
            return localVarFp.postTodo(postTodoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * todo IDが一致するtodoの情報を更新
         * @summary Update Todo Info by Todo ID
         * @param {number} id 既存のtodoのID
         * @param {UpdateTodoIdRequest} [updateTodoIdRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodoId(id: number, updateTodoIdRequest?: UpdateTodoIdRequest, options?: any): AxiosPromise<ToDo> {
            return localVarFp.updateTodoId(id, updateTodoIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
    /**
     * todo IDが一致するtodoの情報を削除
     * @summary Delete Todo Info by Todo ID
     * @param {number} id 既存のtodoのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public deleteTodoId(id: number, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).deleteTodoId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * todo IDが一致するtodoの情報を取得
     * @summary Get Todo Info by Todo ID
     * @param {number} id 既存のtodoのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getTodoId(id: number, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).getTodoId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * すべてのToDoを created_at descで取得する ただし、ToDoの総数が20を超えると、それ以上のToDoは返却されない
     * @summary Get All Todo
     * @param {number} offset 結果セットの収集を開始する前にスキップするアイテムの数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getTodos(offset: number, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).getTodos(offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Todoを新規で作成する
     * @summary Create New Todo
     * @param {PostTodoRequest} [postTodoRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public postTodo(postTodoRequest?: PostTodoRequest, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).postTodo(postTodoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * todo IDが一致するtodoの情報を更新
     * @summary Update Todo Info by Todo ID
     * @param {number} id 既存のtodoのID
     * @param {UpdateTodoIdRequest} [updateTodoIdRequest] APIに必要なフィールドを投稿して、新しいToDoを作成します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public updateTodoId(id: number, updateTodoIdRequest?: UpdateTodoIdRequest, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).updateTodoId(id, updateTodoIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


